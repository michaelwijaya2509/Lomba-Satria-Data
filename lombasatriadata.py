# -*- coding: utf-8 -*-
"""LombaSatriaData.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eAYQH9cfUpRvjrTN8DtrkbnLgXlAWopa

Importing Libraries
"""

import numpy as np
import pandas as pd
import re
import nltk
import torch
import torch.nn as nn
import torch.nn.functional as F
from sklearn.datasets import load_files
nltk.download('stopwords')
nltk.download('wordnet')
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from google.colab import drive
from sklearn.feature_extraction.text import TfidfVectorizer
from torch.utils.data import Dataset, DataLoader, random_split

drive.mount('/content/gdrive')

"""Import data"""

file_path = r"/content/gdrive/MyDrive/Lomba Satria Data/dataset_penyisihan_bdc_2024.xlsx"

# Load the Excel file into a pandas DataFrame
data = pd.read_excel(file_path)

# Assuming the Excel file has columns named 'text' and 'label'
X = data['text']
y = data['label']
print(data.head())

"""# **Pembersihan data**"""

stemmer = WordNetLemmatizer()
lemmatizer = WordNetLemmatizer()
documents = []

for sen in range(0, len(X)):
    # Convert to string
    document = str(X[sen])

    # Remove URLs
    document = re.sub(r'http\S+|www\S+|https\S+', '', document, flags=re.MULTILINE)

    # Remove sequences of characters that don't form words (random strings)
    document = re.sub(r'\b\w{10,}\b', '', document)

    # Remove specific string "[RE coldthem]"
    document = re.sub(r'\[RE coldthem\]', '', document)

    # Remove all the special characters
    document = re.sub(r'\W', ' ', document)

    # Remove all single characters
    document = re.sub(r'\s+[a-zA-Z]\s+', ' ', document)

    # Remove single characters from the start
    document = re.sub(r'\^[a-zA-Z]\s+', ' ', document)

    # Substitute multiple spaces with a single space
    document = re.sub(r'\s+', ' ', document, flags=re.I)

    # Remove the word "RT"
    document = re.sub(r'\bRT\b', '', document)

    # Remove prefixed 'b'
    document = re.sub(r'^b\s+', '', document)

    document = re.sub(r'(\d+)([a-zA-Z]+)(\d+)', lambda m: m.group(2), document)

    document = re.sub(r'[^A-Za-z0-9\s]', '', document)

    document = re.sub(r'\[.*?\]', '', document)

    document = re.sub(r'02', 'prabowo', document)

    document = re.sub(r'01', 'anies', document)

    document = re.sub(r'02', 'ganjar', document)


    wordsToRemove = ['dan', 'serta', 'lagipula', 'setelah', 'sejak', 'selanjutnya', 'tetapi', 'melainkan',
                    'sedangkan', 'atau', 'ataupun', 'maupun', 'untuk', 'agar', 'supaya', 'sebab', 'karena',
                    'sehingga', 'sampai', 'akibatnya', 'lalu', 'kemudian', 'jika', 'kalau', 'jikalau', 'apabila',
                    'walaupun', 'maupun', 'meskipoun', 'biarpun', 'seperti', 'sebagai', 'bagaikan', 'biar',
                    'biarpun', 'bahkan', 'yaitu', 'yakni', 'kecuali', 'selain', 'goblok', 'tolol', 'jancuk',
                    'rt', 'tengil', 're', 'detikbali', 'fuck', 'lo', 'lu', 'letoy', 'cengeng', 'n', 'o', 'pantat',
                    'gue',]

    document = ' '.join(word for word in document.split() if word not in wordsToRemove)

    # Convert to lowercase
    document = document.lower()

    # Lemmatization
    document = document.split()
    document = [stemmer.lemmatize(word) for word in document]
    document = ' '.join(document)
    document = ' '.join(word for word in document.split() if word not in wordsToRemove)

    documents.append(document)

# Display the first few processed documents to verify
for i in range(10):  # Change the number as needed to view more or fewer documents
    print(f"Document {i+1}: {documents[i]}")

"""Vectorization

"""

# Convert text data to numerical data using TF-IDF
vectorizer = TfidfVectorizer(max_features=5000)
X_tfidf = vectorizer.fit_transform(documents).toarray()

# Convert labels to numerical values
from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
y_encoded = encoder.fit_transform(y)

"""Pytorch data preparation"""

class TextDataset(Dataset):
    def __init__(self, texts, labels):
        self.texts = torch.tensor(texts, dtype=torch.float32)
        self.labels = torch.tensor(labels, dtype=torch.long)

    def __len__(self):
        return len(self.texts)

    def __getitem__(self, idx):
        return self.texts[idx], self.labels[idx]

# Create dataset
dataset = TextDataset(X_tfidf, y_encoded)

# Split into training and validation sets
train_size = int(0.8 * len(dataset))
val_size = len(dataset) - train_size
train_dataset, val_dataset = random_split(dataset, [train_size, val_size])

# Create dataloaders
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=32, shuffle=False)

"""Define the Neural Network Model"""

class TextClassifier(nn.Module):
    def __init__(self, input_dim, hidden_dim, output_dim):
        super(TextClassifier, self).__init__()
        self.fc1 = nn.Linear(input_dim, hidden_dim)
        self.fc2 = nn.Linear(hidden_dim, output_dim)

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# Set input dimension (number of features from TF-IDF), hidden dimension, and output dimension (number of classes)
input_dim = X_tfidf.shape[1]
hidden_dim = 100
output_dim = len(encoder.classes_)

# Initialize model, loss function, and optimizer
model = TextClassifier(input_dim, hidden_dim, output_dim)
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

"""Model Training"""

num_epochs = 10

for epoch in range(num_epochs):
    # Training loop
    model.train()
    for texts, labels in train_loader:
        optimizer.zero_grad()
        outputs = model(texts)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

    # Validation loop
    model.eval()
    val_loss = 0.0
    correct = 0
    total = 0
    with torch.no_grad():
        for texts, labels in val_loader:
            outputs = model(texts)
            loss = criterion(outputs, labels)
            val_loss += loss.item()
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    val_loss /= len(val_loader)
    accuracy = correct / total

    print(f'Epoch {epoch+1}/{num_epochs}, Loss: {val_loss:.4f}, Accuracy: {accuracy:.4f}')

"""Model Eval"""

model.eval()
all_labels = []
all_predictions = []
with torch.no_grad():
    for texts, labels in val_loader:
        outputs = model(texts)
        _, predicted = torch.max(outputs, 1)
        all_labels.extend(labels.tolist())
        all_predictions.extend(predicted.tolist())

from sklearn.metrics import classification_report
print(classification_report(all_labels, all_predictions, target_names=encoder.classes_))

FInal

# Ensure the model is in evaluation mode
model.eval()

# Predict labels for the entire dataset
all_predictions = []
with torch.no_grad():
    for texts in torch.tensor(X_tfidf, dtype=torch.float32):
        outputs = model(texts.unsqueeze(0))
        _, predicted = torch.max(outputs, 1)
        all_predictions.append(predicted.item())

# Add predictions to the DataFrame
data['predicted_label'] = encoder.inverse_transform(all_predictions)

from sklearn.metrics import accuracy_score

# Calculate accuracy
accuracy = accuracy_score(y_encoded, all_predictions)
print(f'Overall Accuracy: {accuracy:.4f}')

output_file_path = '/content/gdrive/MyDrive/outputtrainingfile.xlsx'
data.to_excel(output_file_path, index=False)
print(f"Updated dataset with predictions saved to {output_file_path}")